{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","msg","Navbar","navBarFontColor","navBarColor","style","paddingLeft","href","title","id","link","marginLeft","marginRight","color","onClick","handleModeBtn","htmlFor","switchBtnName","TextForm","useState","text","setText","document","heading","textArea","value","onChange","event","target","rows","btnMode","newText","toUpperCase","toLowerCase","speech","SpeechSynthesisUtterance","lang","volume","rate","pitch","window","speechSynthesis","speak","inputText","getElementById","navigator","clipboard","writeText","length","split","Math","round","defaultProps","App","navBar","navBackground","fontColor","body","backgroundColor","mode","setMode","setAlert","alertMessage","message","setTimeout","querySelector","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c510fd0e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n\r\n    // if (props.alert === null) {\r\n    //     return (\r\n    //         <></>\r\n    //     )\r\n    // } else {\r\n    //     return (\r\n    //         <div className={`alert alert-${props.alert.type}`} role=\"alert\">\r\n    //          <strong>{props.alert.msg}</strong>\r\n    //     </div>\r\n    //     )\r\n    // }\r\n\r\n    return (\r\n        \r\n        props.alert && // this code is shortCut becouse of JSX\r\n        <div className={`alert alert-${props.alert.type}`} role=\"alert\">\r\n            <strong>{props.alert.msg}</strong>\r\n        </div>\r\n        \r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n\r\n    const switchs = {\r\n        marginLeft: 'auto',\r\n        marginRight: '20px',\r\n        color: 'white'\r\n    }\r\n    return (\r\n\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.navBarFontColor} bg-${props.navBarColor}`} style={{paddingLeft: '20px'}}>\r\n            <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item active\">\r\n                        <a className=\"nav-link\" href=\"/\">Home</a>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <a className=\"nav-link\" href=\"/about\">{props.link}</a>\r\n                    </li>\r\n                </ul>\r\n                <div className=\"form-check form-switch\" style={switchs}>\r\n                    <input className=\"form-check-input\" onClick={props.handleModeBtn} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.switchBtnName }</label>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    link: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Set titles\",\r\n    link: \"About\"\r\n}","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const handleUpClick = () => {\r\n        const newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.alert(\"Text Uppercased\", \"warning\")\r\n    }\r\n\r\n    const handleLowClick = () => {\r\n        const newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.alert(\"Text Lowercased\", \"warning\")\r\n    }\r\n\r\n    const handleSpeechClick = () => {\r\n        if (text !== \"\") {\r\n            const speech = new SpeechSynthesisUtterance();\r\n\r\n            speech.lang = \"en-US\"\r\n            speech.text = text\r\n            speech.volume = 1\r\n            speech.rate = 1\r\n            speech.pitch = 1\r\n\r\n            window.speechSynthesis.speak(speech);\r\n\r\n            props.alert(\"Speeching\", \"info\")\r\n        }\r\n\r\n    }\r\n\r\n    const handleCopyClick = () => {\r\n        const inputText = document.getElementById('exampleFormControlTextarea1')\r\n\r\n        // inputText.select()\r\n        navigator.clipboard.writeText(inputText.value)\r\n        props.alert(\"Text Lowercased\", \"success\")\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        setText(\"\")\r\n        props.alert(\"All Clear\", \"warning\")\r\n    }\r\n\r\n\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value)\r\n    }\r\n\r\n    document.title = \"Text Utils Home\"\r\n\r\n    return (\r\n        <>\r\n            <div className=\"my-4\">\r\n                <form>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"exampleFormControlTextarea1\">\r\n                            <h2><b>{props.heading}</b></h2>\r\n                        </label>\r\n                        <textarea className=\"form-control\" style={props.textArea.textArea} value={text} id=\"exampleFormControlTextarea1\" onChange={handleOnChange} rows=\"8\"></textarea>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <button className={`btn btn-${props.btnMode} mx-1 my-1`} onClick={handleUpClick}>Uppercase</button>\r\n            <button className={`btn btn-${props.btnMode} mx-1 my-1`} onClick={handleLowClick}>Lowercase</button>\r\n            <button className={`btn btn-${props.btnMode} mx-1 my-1`} onClick={handleSpeechClick}>Speech</button>\r\n            <button className={`btn btn-${props.btnMode} mx-1 my-1`} onClick={handleCopyClick}>Copy</button>\r\n            <button className={`btn btn-${props.btnMode} mx-1 my-1`} onClick={handleClearClick}>Clear</button>\r\n            <br></br>\r\n            <br></br>\r\n            <h3>Text Analyzing</h3>\r\n            <p>Total Characters {text.length}</p>\r\n            <p>Total Words {text.split(' ').length}</p>\r\n            <br></br>\r\n            <p>Reading Time {Math.round(text.split(' ').length * 0.008)} Minutes</p>\r\n            <br></br>\r\n            <br></br>\r\n            <h3>Preview</h3>\r\n            <p>{text}</p>\r\n        </>\r\n    )\r\n}\r\n\r\nTextForm.propTypes = {\r\n    heading: PropTypes.string.isRequired\r\n}","import React, { useState } from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\n// import About from './components/About';\nimport Navbar from './components/Navbar.js';\nimport TextForm from './components/TextForm';\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n\n  const [mode, setMode] = useState(\n    {\n      navBar: {\n        navBackground: \"primary\",\n        fontColor: \"dark\"\n      },\n      switchBtnName: \"Dark Mode\",\n      body: {\n        fontColor: 'dark',\n        backgroundColor: \"white\"\n      },\n      btnMode: \"primary\",\n      textArea: {\n        backgroundColor: \"white\",\n        color: \"black\"\n      }\n    }\n  );\n\n  const handleModeBtn = () => {\n    if (mode.navBar.navBackground !== \"primary\") {\n      setMode(\n        {\n          navBar: {\n            navBackground: \"primary\",\n            fontColor: \"dark\"\n          },\n          switchBtnName: \"Dark Mode\",\n          body: {\n            fontColor: 'black',\n            backgroundColor: \"white\"\n          },\n          btnMode: \"primary\",\n          textArea: {\n            backgroundColor: \"white\",\n            color: \"black\"\n          }\n        }\n      )\n\n      alertMessage(\"Enable white mode\", \"primary\")\n\n    } else {\n      setMode(\n        {\n          navBar: {\n            navBackground: \"dark\",\n            fontColor: \"dark\"\n          },\n          switchBtnName: \"White Mode\",\n          body: {\n            fontColor: 'white',\n            backgroundColor: \"black\"\n          },\n          btnMode: \"dark\",\n          textArea: {\n            backgroundColor: \"#20282f\",\n            color: \"white\"\n          }\n        }\n      )\n\n      alertMessage(\"Enable Dark mode\", \"dark\")\n\n    }\n  }\n\n\n  const [alert, setAlert] = useState(null)\n\n  const alertMessage = (message, type) => {\n    setAlert(\n      {\n        msg: message,\n        type: type\n      }\n    )\n\n    setTimeout(() => {\n      setAlert(null)\n    }, 1.5 * 1000)\n  }\n\n\n  document.querySelector('body').style.backgroundColor = mode.body.backgroundColor\n  document.querySelector('body').style.color = mode.body.fontColor\n\n  return (\n\n    <>\n\n      <Navbar title=\"TextUtils\" navBarFontColor={mode.navBar.fontColor} navBarColor={mode.navBar.navBackground} switchBtnName={mode.switchBtnName} handleModeBtn={handleModeBtn} />\n      <Alert alert={alert} />\n      <div className=\"container\">\n        <TextForm heading=\"Type Your Text\" btnMode={mode.btnMode} textArea={mode} alert={alertMessage} />\n      </div>\n\n    </>\n    // <Router>\n\n    //   <Navbar title=\"TextUtils\" navBarFontColor={mode.navBar.fontColor} navBarColor={mode.navBar.navBackground} switchBtnName={mode.switchBtnName} handleModeBtn={handleModeBtn} />\n    //   <Alert alert={alert} />\n    //   <div className=\"container\">\n    //     <Switch>\n    //       <Route exact path=\"/about\">\n    //         <About mode={mode.body} />\n    //       </Route>\n    //       <Route exact path=\"/\">\n    //         <TextForm heading=\"Type Your Text\" btnMode={mode.btnMode} textArea={mode} alert={alertMessage} />\n    //       </Route>\n    //     </Switch>\n    //   </div>\n\n    // </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}